1. Как можно дополнить код, чтобы он начал компилироваться? 1 балл

Дописать "using System.Console;" в начало--
Это скомпилируется, но при выполнении метода возникнет ошибка
Написать "System.Math.Min" вместо "Math.Min" ----
Дописать "using System.Math;" в начало
Дописать "using System;" в начало ---  


2. Что это может значить? Отметьте все корректные варианты. 1 балл

Ошибка в файле Min.cs
Вася привел компилятору всего один аргумент, почему стоит компилировать эту программу. Этого явно мало!
Ничего страшного, это сообщение можно просто игнорировать
Ошибка в файле Program.cs--
Вася попытался вызвать функцию Min с одним аргументом---
Вася снова забыл написать using
Ошибка где-то в девятой строке--

#Очепятки
public static void Main()
    {
        Console.WriteLine("Hello, World!");
        var number = 5.5;
        number += 7;
        Console.WriteLine(number);
    }
#Минимум функции
private static void WriteParabolaMinX(int a, int b, int c)
{
	var ans = a != 0 ? (-b/(2*(double)a)).ToString() : "Impossible";
	Console.WriteLine(ans);
}

#Горячие клавиши отладки
Шаг с заходом внутрь метода (Step Into)
F11
Запуск программы под отладчиком / продолжение после точки останова
F5
Выполнение инструкций вплоть до выхода из текущего метода. (Step Out)
Shift+F11
Шаг без захода внутрь метода (Step Over)
F10

 1. Что неправильного в этом коде? Как его можно улучшить? Выберите все верные варианты. 0 из 1 балла

Do слишком неинформативное имя для метода--
Переменная A названа большой буквой, что противоречит принятым в C# правилам именования --
Нужно убрать лишний отступ перед инструкцией Console.WriteLine --
Можно убрать лишний оператор return --
theNumberToSquareAndSum излишне подробное имя для переменной цикла-- 
theNumberToSquareAndSum лучше сделать полем класса
upperBound лучше сделать аргументом метода Do --
A лучше сделать локальной переменной --
A слишком неинформативное имя --
Для краткости можно использовать оператор += --
theNumberToSquareAndSum названа с маленькой буквы, что противоречит принятым в C# правилам именования

2. Что стилистически неверно в коде выше? Выберите все верные варианты. 1 балл

void в сигнатуре Main() не нужен
Название переменной не соответствует правилу camelCase---
Название переменной не соответствует содержанию--
Незачем создавать класс, если всего один метод внутри

3. Исправлять стилистические ошибки нужно только если больше нечего делать 1 балл

Верно
Неверно--
4. Какие имена наиболее удачны для переменной, хранящей количество яблок? 1 балл

yabloCount
amountOfApples--
n
kolYablok
applesCount--
Apples
5. Какое название стоит дать методу, который печатает переданную ему строку на экран? Выберите все верные варианты. 1 балл

printString(string s)
ReturnString(string s)
Write(string s)--
PrintString(string s)--
GetString(string s)



1. Что следует изменить в коде выше? Выберите все верные варианты. 1 балл

Выделить нахождение площади круга и вывод на экран в отдельный метод--
Ничего, код великолепен!
Переименовать Main в PrintNumbers
Использовать константу Math.PI, вместо 3.14--

2. Как следует отрефакторить код выше? Выберите все верные варианты. 1 балл

Изменить название метода PrintResult
Использовать enum вместо целых чисел--
Использовать именованные константы--
Никак, он и так понятен
3. Метод в 60 строк — это норма! 1 балл

Верно
Неверно--

4. Почему необходимо писать качественный код? Выберите все верные варианты. 1 балл

У людей портится настроение, когда они читают плохо написанный код--
Плохо написанный код сложно понять даже автору через некоторое время--
Качественный код облегчает совместную работу в команде--
Качественный код проще изменять и развивать--


#Сделай то, не знаю что
public static string Decode (string a)
	{
	var b = int.Parse(a.Replace(".",""))%1024;
		return b.ToString();
	}
	
#Практика «Angry Birds»
using System;

namespace AngryBirds
{
        public static class AngryBirdsTask
	{
		
		public static double FindSightAngle(double v, double distance)
		{
			       
            double g = 9.8;
            
            return 0.5 * Math.Asin(distance * g / Math.Pow(v,2));
		}
	}
}
	
#Практика «Бильярд»		
using System;

namespace Billiards
{
	public static class BilliardsTask
	{
	public static double BounceWall(double directionRadians, double wallInclinationRadians)
		{
    wallInclinationRadians += 90;
    directionRadians += 180;
    
    double diff = wallInclinationRadians - directionRadians;
    double res = directionRadians + 2 * diff + 360 * 5;
 
    res %= 360;
    if (res > 180)
    {
        res -= 360;
    }
    
    return res;
}
	}
}

#Практика «Проценты»
public static double Calculate(string userInput)
        {
            string[] values = userInput.Split(' ');
            
            var sum = double.Parse(values[0]);
            var rank = double.Parse(values[1]);
            var deposit = double.Parse(values[2]);

            return (sum * (Math.Pow(1 + rank / 1200, deposit)));
        }	
	
