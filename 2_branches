#Високосный год

public static bool IsLeapYear(int year)
{
	return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
}

#Среднее трех
public static int MiddleOf(int a, int b, int c)
        {
            if (a < b)
            {
                if (b < c)
                {
                    return b;
                }
                else if (a > c)
                {
                    return a;
                }
                else return c;
            }
            else if (a > b)
            {
                if (a < c)
                {
                    return a;
                }
                else if(b > c)
                {
                    return b;
                }
                else return c;
            }
            else return a;
        }
        
#Ход ферзя

public static bool IsCorrectMove(string from, string to)
{
	var dx = Math.Abs(to[0] - from[0]); 
	var dy = Math.Abs(to[1] - from[1]);
	if ((dx>0)&&(dy>0)&&(dx == dy))
		return true;
	else if (((dx == 0)&&(dy > 0))||((dy == 0)&&(dx>0)))
	return true;
		
	else
	return false;
	
}       


1. Что может стоять на месте [Нечто]? Отметьте все верные утверждения. 1 балл
Сравнение чисел или строк--
Любое выражение
Любое выражение типа bool--
Вызов метода, возвращающего bool--
Переменная, поле или свойство класса типа bool--
Выражение типа int
Выражение типа string

1
if (!IsNotPrimeNumber(p)) Console.WriteLine(p);
2. Что не так в этом коде? 1 балл
IsNotPrimeNumber слишком длинное название
Лучше написать `if (IsNotPrimeNumber(p) == false) ...`
Лучше вместо метода IsNotPrimeNumber написать метод IsPrimeNumber, тогда не будет двойного отрицания в условии--

3. Что же тут смешного? Отметьте все верные утверждения про этот код 1 балл
Выражение в последней ветви всегда равно false--
Если заменить выражение в последней ветви на true, то ничего не изменится--
Последняя ветвь никогда не выполняется--
Второй if можно заменить на `return false`--
Весь этот код можно заменить на `return a`--

#Управление роботом

static bool ShouldFire2(bool enemyInFront, string enemyName, int robotHealth)
{
 return ((enemyInFront == true) && (enemyName == "boss") && (robotHealth >= 50))||      ((enemyInFront == true) && (enemyName != "boss"));
}


#Практика "Рубль -лей -ля"
namespace Pluralize
{
    public static class PluralizeTask
    {
        public static string PluralizeRubles(int count)
        {
            if (count < 10 || count > 20 && count < 100)
            {
                int rem = count % 10;
                return (rem > 1 && rem < 5) ? "рубля" : ((rem > 4 || rem == 0) ? "рублей" : "рубль");
            }
            else
            {
                while (true)
                {
                    count %= 100;
                    if (count < 100) break;
                }

                if (count < 10 || count > 20 && count < 100)
                {
                    int rem = count % 10;
                    return (rem > 1 && rem < 5) ? "рубля" : ((rem > 4 || rem == 0) ? "рублей" : "рубль");
                }
                else
                    return "рублей";
            }
        }
    }
}

#Практика "Два прямоугольника"
using System;
 
namespace Rectangles
{
    public static class RectanglesTask
    {
        // Пересекаются ли два прямоугольника (пересечение только по границе также считается пересечением)
        public static bool AreIntersected(Rectangle r1, Rectangle r2)
        {
            if (A(r1.Left, r2.Left, r1.Width, r2.Width) && A(r1.Top, r2.Top, r1.Height, r2.Height))
                    return true;
            else
                    return false;
        }
 
        // Площадь пересечения прямоугольников
        public static int IntersectionSquare(Rectangle r1, Rectangle r2)
        {
            if (!AreIntersected(r1, r2)) return 0;
            else if ((r1.Left <= r2.Left) && (r1.Top <= r2.Top))
                return Math.Min((r1.Top + r1.Height - r2.Top), Math.Min(r1.Height, r2.Height)) * Math.Min((r1.Left + r1.Width - r2.Left), Math.Min(r1.Width, r2.Width));
            else if ((r1.Left <= r2.Left) && (r2.Top <= r1.Top))
                return Math.Min((r1.Left + r1.Width - r2.Left), Math.Min(r1.Width, r2.Width)) * Math.Min((r2.Top + r2.Height - r1.Top), Math.Min(r1.Height, r2.Height));
            else if ((r2.Left <= r1.Left) && (r2.Top <= r1.Top))
                return Math.Min((r2.Top + r2.Height - r1.Top), Math.Min(r1.Height, r2.Height)) * Math.Min((r2.Left + r2.Width - r1.Left), Math.Min(r1.Width, r2.Width));
            else return Math.Min((r2.Left + r2.Width - r1.Left), Math.Min(r1.Width, r2.Width)) * Math.Min((r1.Top + r1.Height - r2.Top), Math.Min(r1.Height, r2.Height));
        }
 
        // Если один из прямоугольников целиком находится внутри другого — вернуть номер (с нуля) внутреннего.
        // Иначе вернуть -1
        public static int IndexOfInnerRectangle(Rectangle r1, Rectangle r2)
        {
            int square1 = r1.Width * r1.Height;
            int square2 = r2.Width * r2.Height;
            if ((IntersectionSquare(r1, r2) == square1) && (square1 != 0) || (square1 == 0) && (r1.Left >= r2.Left) && (r1.Left <= r2.Left + r2.Width) && (r1.Top >= r2.Top) && (r1.Top <= r2.Top + r2.Height)) return 0;
            else if ((IntersectionSquare(r1, r2) == square2) && (square2 != 0) || (square2 == 0) && (r2.Left >= r1.Left) && (r2.Left <= r1.Left + r1.Width) && (r2.Top >= r1.Top) && (r2.Top <= r1.Top + r1.Height)) return 1;
            else return -1;
        }
       
        static bool A(int x1, int x2, int y1, int y2)
        {
            return ((x1 + y1 - x2) >= 0) && ((y1 + y2) >= (x1 + y1 - x2));
        }
    }
}


#Практика "Расстояние до отрезка"

using System;
namespace DistanceTask
{
    public static class DistanceTask
    {
    public static double GetDistanceToSegment(double ax, double ay, double bx, double by, double x, double y)
        {
            if (ax == bx && ay == by)
                return Math.Sqrt(Math.Pow(x - ax, 2) + Math.Pow(y - ay, 2));
            else if ((x - ax) * (bx - ax) + (y - ay) * (by - ay) < 0 ||
                (x - bx) * (ax - bx) + (y - by) * (ay - by) < 0)
                return Math.Min(Math.Sqrt(Math.Pow(x - ax, 2) + Math.Pow(y - ay, 2)),
                    Math.Sqrt(Math.Pow(x - bx, 2) + Math.Pow(y - by, 2)));
            else
                return Math.Abs((bx - ax) * (y - ay) - (by - ay) * (x - ax)) /
                    Math.Sqrt(Math.Pow(bx - ax, 2) + Math.Pow(by - ay, 2));
        }
    }
}
