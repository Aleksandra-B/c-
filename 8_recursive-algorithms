#Исправить рекурсию
public static void WriteReversed(char[] items, int startIndex = 0)
{
	if (items.Length != 0)
    {
		if (startIndex != items.Length - 1)
        {
			WriteReversed(items, startIndex + 1);
        }
        Console.Write(items[startIndex]);
    }
}

#Перебор паролей	
static void MakeSubsets(char[] subset, int position = 0)
		{
			if (position == subset.Length)
			{
				Console.WriteLine(new string(subset));
				return;
			}
			subset[position] = 'a';
			MakeSubsets(subset, position + 1);
			subset[position] = 'b';
			MakeSubsets(subset, position + 1);
			subset[position] = 'c';
			MakeSubsets(subset, position + 1);
		}


1. Что делает функция F? 1 из 1 балла
Вычисляет значение x^yx
При некоторых значениях аргументов будет бесконечная рекурсия
Вычисляет НОД x и y по алгоритму Евклида
--Вычисляет минимальный разряд десятичного числа x, в котором стоит 0
Вычисляет остаток от деления x на y

2. Легко проверить, что вызов F(0) не породит ни одного рекурсивного вызова F. 
А сколько рекурсивных вызовов FF породит вызов F(15)?

Правильный ответ: 2

3. Что делает функция G? 1 из 1 балла
Вычисляет значение x^yx

--Вычисляет НОД x и y по алгоритму Евклида 
это рекурсивная версия классического алгоритма Евклида

При некоторых значениях аргументов будет бесконечная рекурсия
Вычисляет остаток от деления x на y
Вычисляет минимальный разряд десятичного числа x, в котором стоит 0

#Практика "Перебор паролей 2"

public class CaseAlternatorTask
{
	public static List<string> AlternateCharCases(string lowercaseWord)
	{
		var result = new List<string>();
		AlternateCharCases(lowercaseWord.ToCharArray(), 0, result);
		return result;
	}

	static void AlternateCharCases(char[] word, int startIndex, List<string> result)
	{
		if (startIndex < word.Length)
		{
			if (char.IsLetter(word[startIndex]))
			{
				word[startIndex] = char.ToLower(word[startIndex]);
				AlternateCharCases(word, startIndex + 1, result);

				word[startIndex] = char.ToUpper(word[startIndex]);
				AlternateCharCases(word, startIndex + 1, result);
			}
			else
			{
				AlternateCharCases(word, startIndex + 1, result);
			}
		}

		var nextWord = new string(word);

		if (!result.Contains(nextWord))
		{
			result.Add(nextWord);
		}
	}
}	

#Практика "Хождение по чекпоинтам"

using System;
using System.Drawing;

namespace RoutePlanning
{
    public static class PathFinderTask
    {
        public static int[] FindBestCheckpointsOrder(Point[] checkpoints)
        {
            var numberOfCheckpoints = checkpoints.Length;
            var shortestPath = new int[numberOfCheckpoints];
            var path = new int[numberOfCheckpoints];
            var shortestDistance = double.PositiveInfinity;

            MakePathPermutations(checkpoints, shortestPath, path, 1, shortestDistance);

            return shortestPath;
        }

        private static double MakePathPermutations(Point[] checkpoints, int[] shortestPath,
            int[] path, int position, double shortestDistance)
        {
            var numberOfCheckpoints = checkpoints.Length;
            var distance = checkpoints.GetPathLength(path);

            if (position == path.Length && distance < shortestDistance)
            {
                shortestDistance = distance;
                Array.Copy(path, shortestPath, numberOfCheckpoints);
                return shortestDistance;
            }

            for (var i = 0; i < numberOfCheckpoints; i++)
            {
                var index = Array.IndexOf(path, i, 0, position);

                if (index == -1)
                {
                    path[position] = i;
                    shortestDistance = MakePathPermutations(checkpoints, shortestPath, path,
                        position + 1, shortestDistance);
                }
            }

            return shortestDistance;
        }
    }
}
